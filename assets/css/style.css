:root {
    --primary-color: #0a1128;
    --hover-primary-color: #182757;
    --white-color: #ffffff;
    --light-gray-color: #eeeeee;
    --medium-gray-color: #dddddd;
    --heavy-gray-color: #aaaaaa;
    --secondary-color: crimson; 
    --gap: 3rem;
}

* {
    margin: 0;
    padding: 0;
}
html {
    font-size: 62.5%;
    scroll-behavior: smooth;
}

body {
    font-family: 'Open Sans', sans-serif;
    font-size: 2rem;
    color: var(--primary-color);
    line-height: 1.5;
}

h1, h2, h3, h4, h5, h6 {
    font-family: 'Montserrat', sans-serif;
}

h1 {
    font-size: 6rem;
    text-transform: uppercase;
}
h2 {
    font-size: 5.5rem;
    margin-bottom: 1rem;
    text-transform: uppercase;
    line-height: 1.2;
}
h3 {
    font-size: 5rem;
}
h4 {
    font-size: 4.5rem;
}
h5 {
    font-size: 4rem;
}
h6 {
    font-size: 3.5rem;
}

a {
    text-decoration: none;
}

p {
    margin-bottom: 3rem;
}

.spacing {
    height: 4rem;
}

.main-background {
    background-image: url("../img/main-background.svg");
    background-size: cover;
    background-position: center center;
    color: var(--white-color);
}
.white-background {
    background: var(--white-color);
}
/*vai sustentar o conteúdo*/
.main-content {
    max-width: 120rem;
    margin: 0 auto;
    padding: 8rem 3rem 2rem 3rem;
}
/*tamanho da seção (tamanho do background q vai ser 100% da tela)*/
.height-background {
    min-height: 100vh;
}

.menu {
    position: fixed;
    /*ele sai da camada normal dos elementos então ele fica por cima dos outros e os elementos sobem
    e top,left e right pra garantir que ele não saia do lugar se add algo*/
    top: 0;
    left: 0;
    right: 0;
    width: 100%; /*100% de largura do viewport*/
    border-bottom: 0.2rem solid var(--light-gray-color);
    z-index: 1; /*ficar na camada mais acima pq quando uso transform nas fotos da gallery as fotos ficam por cima do menu*/
}
.menu-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding-top: 0;
    padding-bottom: 0;
    /*o ideal seria colocar padding-top e bottom 0 aqui mas o meu já está sem vai entender pq*/
}
.menu h1 {
    font-size: 2.3rem;
    color: var(--primary-color);
}
.menu h1 a {
    color: inherit;
}
/*usar a ul como container do menu*/
.menu ul {
    list-style: none;
    display: flex;
}
/*os links vão ser display block pra ajustar a ul usando o a, invés de ajustar o li vai ajustar o a, pq por padrão o a é display: inline ai não empurra o container pra baixo*/
.menu ul li a {
    display: block;
    padding: 2rem;
    color: var(--primary-color);
    position: relative;
}
.menu ul li a::after {
    content: '';
    position: absolute;
    bottom: 1rem; 
    width: 0%;
    left: 50%;
    height: 0.2rem;
    background-color: var(--secondary-color);
    transition: all 300ms ease-in-out;
}
.menu ul li a:hover::after {
    width: 50%;
    left: 25%;
}
.close-menu {
    display: none;
}
.back-to-top {
    display: none;
}

/*separando um espaço para o texto e outro para imagem com grid*/
.intro-content {
    display: grid;
    grid-template-columns: 1fr 1.5fr;
    gap: var(--gap);
    min-height: 100vh;
}
/*o espaço dos textos vai ser um flex e vai ficar um elemento em baixo do outro*/
.intro-text-content, .intro-img {
    display: flex;
    flex-flow: column wrap;
    justify-content: center;
}
.intro-img img {
    max-width: 100%;
    height: auto;
}

/*dar um display flex pra usar justify-content: center*/
.top3-content {
    display: flex;
    flex-flow: column nowrap;
    justify-content: center;
    min-height: 100vh; /*o tamanho mínimo da tela é 100%, se passar disso (quando diminuir o texto e ele ocupar mais linhas ele sai da tela, se usar min-height ele aumenta o height)*/
    max-width: 80rem; /*tamanho máximo de 800px pra segurar o container nesse tamanho*/
    text-align: center;
}

/*repetindo código aqui pq se eu quiser fazer algo diferente no conteudo da seção grid-content eu posso fazer isso mais de boa, ou se eu precisar usar aquela classe pra fazer outra coisa não influencia aqui*/
.grid-one-content {
    display: flex;
    flex-flow: column wrap;
    justify-content: center;
    min-height: 100vh; /*mesmo esquema pra caber o conteudo na tela sem causar um overflow tentando deixar todo conteudo dentro de um hight de 100vh*/
}
.grid-main-heading {
    margin-bottom: 1rem;
}
.grid-description {
    padding-bottom: 5rem;
}
.grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: var(--gap);
    counter-reset: grid-counter;
}
.grid h3 {
    font-size: 3rem;
    position: relative;
    /*separar o titulo do texto e do contador*/
    padding: 0 0 2rem 6rem;
}
/*criar um número do lado de cada item
posso fazer um contador na página, como vai ser na grid vou criar do lado do titulo do grid= counter-reset: grid-counter, pode ser qualquer nome, vou usar no ::before pq vem antes do elemento no caso*/
.grid h3::before {
    counter-increment: grid-counter;
    content: counter(grid-counter);
    /*posicionar*/
    position: absolute;
    font-size: 8rem;
    font-style: italic;
    top: -4rem;
    left: -1rem;
    transform: rotate(5deg); /*rodar um pouco o numero do contador em 5 graus*/
}

.gallery-img {
    width: 100%;
    max-width: 36rem;
    max-height: 36rem;
    overflow: hidden;
}
/*transition pra colocar efeito*/
.gallery-img img {
    transition: all 300ms ease-in-out;
}
/*o transform é pra rodar, escalar, da pra fazer coisas com elemento 3D e 2D
translate= move para uma direção (lados, cima/baixo)
positivo: direita, positivo: baixo
negativo: esquerda, negativo: cima
scale() = zoom na imagem
*/
.gallery-img img:hover {
    transform: translate(-3%, -3%) scale(1.2) rotate(5deg);
}

.table {
    width: 100%;
    overflow: hidden;
    overflow-x: auto;
    min-width: 16rem;
}
.table table {
    box-shadow: 0 0 1rem var(--primary-color);
    border-collapse: collapse;
    border-bottom: 0.3rem solid var(--primary-color);
    margin: 0 auto;
    max-width: 100%;
    overflow-x: auto;
}
.table thead {
    background-color: var(--primary-color);
    color: var(--white-color);
}
.table caption {
    text-align: left;
    font-style: italic;
}
.table th, td{
    text-align: left;
    padding: 1rem 2rem;
}
th:not(:nth-child(4)){
    padding-right: 8rem;
}
.table table, .table th:nth-child(1) {
    border-top-left-radius: 1rem;
}
.table table, .table th:nth-child(4) {
    border-top-right-radius: 1rem;
}
.table tr:nth-child(even) {
    background-color: var(--medium-gray-color);
}

.intro-content {
    display: grid;
    grid-template-columns: 1fr 1.5fr;
    gap: var(--gap);
    min-height: 100vh;
}
/*o espaço dos textos vai ser um flex e vai ficar um elemento em baixo do outro*/
.intro-text-content, .intro-img {
    display: flex;
    flex-flow: column wrap;
    justify-content: center;
}

/*repetindo o código da primeiro seção porque se eu quiser mudar a area de contato como eu quiser eu posso depois*/
.contact-content {
    display: grid;
    grid-template-columns: 1.5fr 1fr;
    min-height: 100vh;
}
.form-content, .contact-img {
    display: flex;
    flex-flow: column wrap;
    justify-content: center;
}
.contact-img {
    max-width: 100%;
}
.contact-img img {
    max-width: 80%;
    height: auto;
}

.form form {
    margin: 0 auto;
    max-width: 25rem;
}
.form {
    max-height: 45rem;
    max-width: 30rem;
    background-color: var(--white-color);
    color: var(--primary-color);
    border-radius: 1rem;
    padding: var(--gap);
}
.form p {
    text-align: center;
    text-transform: uppercase;
}
.form label {
    display: block;
    cursor: pointer;
}
.form input, .form textarea {
    font-size: 1.8rem;
    outline: 0;
    border-left: none;
    border-right: none;
    border-top: none;
    border-bottom: 0.1rem solid var(--medium-gray-color);
}
.form input:not(.submit-button), textarea {
    padding-top: 1rem;
    margin-top: 2rem;
}
textarea {
    max-width: 25rem;
    min-width: 25rem;
    max-height: 15rem;
    min-height: 15rem;
}
.submit-button {
    width: 25rem;
    height: 4rem;
    background-color: var(--primary-color);
    color: var(--white-color);
    text-transform: uppercase;
    transition: 300ms;
    margin-top: 2rem;
}
.submit-button:hover {
    background-color: var(--hover-primary-color);
    transform: scale(1.3)
}
::placeholder {
    font-size: 1.8rem;
    color: var(--heavy-gray-color);
}

.footer-content {
    text-align: center;
    padding: var(--gap);
}
.heart {
    color: var(--secondary-color);
}
.footer-content a {
    color: var(--primary-color);
}


@media (max-width: 965px) {
    h2 {
        font-size: 4.5rem;
    }
}
@media (max-width: 880px) {
    .grid {
        grid-template-columns: 1fr;
    }
    .intro-img {
        padding-bottom: var(--gap);
    }
    .grid-gallery-responsive {
        grid-template-columns: 1fr 1fr;
    }
    .gallery-img img {
        display: block;
        width: 100%;
    }
    .contact-content {
        grid-template-columns: 1fr 1fr;
    }
    .contact-content img {
        display: none;
    }
}
@media (max-width: 800px) {
    .intro-content {
        grid-template-columns: 1fr;
    }
    .intro-content img {
        max-width: 90%;
    }
    .spacing {
        display: none;
    }
    .menu {
        bottom: 0;
        display: none;
    }
    .menu-content, .menu-content ul {
        flex-direction: column;
        justify-content: center;
    }
    .menu-content {
        height: 100vh;
    }
    .close-menu-label::after {
        content: '☰';
        position: fixed;
        z-index: 2;
        top: 2rem;
        right: 2rem;
        background-color: var(--primary-color);
        color: var(--white-color);
        font-size: 3rem;
        line-height: 3rem;
        width: 3rem;
        height: 3rem;
        text-align: center;
        padding: 0.5rem;
    }
    .close-menu:checked~.menu {
         display: block;
    }
    .close-menu:checked~.close-menu-label::after {
        content: '✖';
    }
    .back-to-top {
        color: var(--hover-primary-color);
        font-size: 2rem;
        font-weight: bold;
        width: 4rem;
        height: 4rem;
        position: fixed;
        right: 5%;
        bottom: 2%;
        background-color: var(--white-color);
        border: 0.1rem solid var(--primary-color);
        border-radius: 2.5rem;
        transform: rotate(-90deg);
        display: flex;
        justify-content: center;
        align-items: center;
    }
    .top3-content {
        padding-top: 0;
    }
}
@media (max-width: 750px) {
    .contact-content {
        display: flex;
        flex-flow: column wrap;
    }
    .main-content.contact-content {
        padding: 0;
    }
    .contact-img {
        padding: var(--gap);
    }
    .form-content {
        margin: 0 auto;
        padding-bottom: var(--gap);
    }
    h2 {
        font-size: 3.5rem;
    }
    body {
        font-size: 1.6rem;
    }
}
@media (max-width: 620px) {
    .table table {
        box-shadow: none;
    }
}
@media (max-width: 500px) {
    .grid-gallery-responsive {
        grid-template-columns: 1fr;
    }
    .gallery-img {
        margin: 0 auto;
    }
    .submit-button:hover {
        transform: scale(1);
    }
}
@media (max-width: 360px){
    .form {
        border-radius: 0;
    }
    .form-content {
        min-width: 100vw;
    }
    .form-content {
        margin: 0 auto;
        padding-bottom: 0;
    }
}

